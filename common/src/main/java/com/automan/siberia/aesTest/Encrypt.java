package com.automan.siberia.aesTest;import lombok.SneakyThrows;import javax.crypto.Cipher;import javax.crypto.KeyGenerator;import javax.crypto.SecretKey;import javax.crypto.spec.SecretKeySpec;import java.security.SecureRandom;/** * @Author he.zhou * @Date 2020-08-19 */public class Encrypt {    public static String encrypt(String content, String key) {        try {            KeyGenerator kgen = KeyGenerator.getInstance("AES");//构造密钥生成器，指定为AES算法，不区分大小写            kgen.init(128, new SecureRandom(key.getBytes()));            SecretKey secretKey = kgen.generateKey();            byte[] enCodeFormat = secretKey.getEncoded();            SecretKeySpec secretKeySpec = new SecretKeySpec(enCodeFormat, "AES");            Cipher cipher = Cipher.getInstance("AES");            byte[] byteContent = content.getBytes("utf-8");            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);//ENCRYPT_MODE指加密操作            byte[] byteRresult = cipher.doFinal(byteContent);            StringBuffer sb = new StringBuffer();            for (int i = 0; i < byteRresult.length; i++) {                String hex = Integer.toHexString(byteRresult[i] & 0xFF);                if (hex.length() == 1) {                    hex = '0' + hex;                }                sb.append(hex.toUpperCase());            }            return sb.toString();        } catch (Exception e) {        }        return null;    }    /**     * 解密     *     * @param content 待解密内容     * @param key     解密的密钥     * @return     */    public static String decrypt(String content, String key) {        if (content.length() < 1)            return null;        byte[] byteRresult = new byte[content.length() / 2];        for (int i = 0; i < content.length() / 2; i++) {            int high = Integer.parseInt(content.substring(i * 2, i * 2 + 1), 16);            int low = Integer.parseInt(content.substring(i * 2 + 1, i * 2 + 2), 16);            byteRresult[i] = (byte) (high * 16 + low);        }        try {            KeyGenerator kgen = KeyGenerator.getInstance("AES");            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");            secureRandom.setSeed(key.getBytes());            kgen.init(128, secureRandom);            SecretKey secretKey = kgen.generateKey();            byte[] enCodeFormat = secretKey.getEncoded();            SecretKeySpec secretKeySpec = new SecretKeySpec(enCodeFormat, "AES");            Cipher cipher = Cipher.getInstance("AES");            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);//Decrypt_mode指解密操作            byte[] result = cipher.doFinal(byteRresult);            return new String(result, "utf-8");//不加utf-8，中文时会乱码        } catch (Exception e) {        }        return null;    }    public static void main(String[] args) {        System.out.println(encrypt("北京市海淀区东升镇中联科科技公司永泰绿色生态园", "132323213"));    }}