package com.automan.siberia.pruduceComsumer.LockTest;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * 三个线程 * 一个打印5个数 * 一个打印10个数 * 一个打印3个数 * 交替打印 * * @Author he.zhou * @Date 2020-12-22 */public class ConditionTset1 {    private int num = 1;    private int count = 1;    private Lock lock = new ReentrantLock();    private Condition condition1 = lock.newCondition();    private Condition condition2 = lock.newCondition();    private Condition condition3 = lock.newCondition();    public void one() {        while (num <= 100) {            lock.lock();            if (count == 1) {                for (int i = 1; i < 6; i++) {                    System.out.println(Thread.currentThread().getName() + "===" + num);                    num++;                }                count = 2;                condition2.signal();            } else {                try {                    condition1.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            lock.unlock();        }    }    public void two() {        while (num <= 100) {            lock.lock();            if (count == 2) {                for (int i = 1; i < 10; i++) {                    System.out.println(Thread.currentThread().getName() + "===" + num);                    num++;                }                count = 3;                condition3.signal();            } else {                try {                    condition2.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            lock.unlock();        }    }    public void three() {        while (num <= 100) {            lock.lock();            if (count == 3) {                for (int i = 1; i < 6; i++) {                    System.out.println(Thread.currentThread().getName() + "===" + num);                    num++;                }                count = 1;                condition1.signal();            } else {                try {                    condition3.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            lock.unlock();        }    }    public static void main(String[] args) {        ConditionTset1 tset1 = new ConditionTset1();        new Thread(tset1::one).start();        new Thread(() -> tset1.two()).start();        new Thread(() -> tset1.three()).start();    }}