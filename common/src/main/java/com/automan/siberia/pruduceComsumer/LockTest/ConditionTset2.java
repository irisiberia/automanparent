package com.automan.siberia.pruduceComsumer.LockTest;import java.util.concurrent.locks.ReentrantLock;/** * @Author he.zhou * @Date 2021-03-23 */public class ConditionTset2 {    public static  int flag = 1;    public static int num = 0;    public static final ReentrantLock LOCK = new ReentrantLock();//    public static Condition condition1 = LOCK.newCondition();//    public static Condition condition2 = LOCK.newCondition();//    public static Condition condition3 = LOCK.newCondition();    public void test1() throws InterruptedException {        while (true) {            LOCK.lock();            if (num > 100) {                break;            }            String s = "{\"msg_type\":\"text\",\"content\":{\"text\":\"new-meet-router \n10分钟内(非/health/check) 访问成功的 pv {{ctx.payload.hits.total}}\"}}";            if (flag == 1) {                for (int i = 0; i < 3; i++) {                    if (num < 100) {                        System.out.println("test1" + "-=====" + num);                        num++;                    } else {                        break;                    }                }                flag=2;//                condition2.signal();            }//            else {//                condition1.await();//            }            LOCK.unlock();        }    }    public void test2() throws InterruptedException {        while (true) {            LOCK.lock();            if (num > 100) {                break;            }            if (flag == 2) {                for (int i = 0; i < 3; i++) {                    if (num < 100) {                        System.out.println("test2" + "-=====" + num);                        num++;                    } else {                        break;                    }                }                flag=3;//                condition3.signal();            }//            else {//                condition2.await();//            }            LOCK.unlock();        }    }    public void test3() throws InterruptedException {        while (true) {            LOCK.lock();            if (num > 100) {                break;            }            if (flag == 3) {                for (int i = 0; i < 3; i++) {                    if (num < 100) {                        System.out.println("test3" + "-=====" + num);                        num++;                    } else {                        break;                    }                }                flag=1;//                condition1.signal();            }//            else {//                condition3.await();//            }            LOCK.unlock();        }    }    public static void main(String[] args) {        ConditionTset2 tset333 = new ConditionTset2();        new Thread(() -> {            try {                tset333.test1();            } catch (InterruptedException e) {                e.printStackTrace();            }        }).start();        new Thread(() -> {            try {                tset333.test2();            } catch (InterruptedException e) {                e.printStackTrace();            }        }).start();        new Thread(() -> {            try {                tset333.test3();            } catch (InterruptedException e) {                e.printStackTrace();            }        }).start();    }}