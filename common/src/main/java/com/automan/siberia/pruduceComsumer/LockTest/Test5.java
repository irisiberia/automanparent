package com.automan.siberia.pruduceComsumer.LockTest;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * @Author he.zhou * @Date 2020-09-16 */public class Test5 {    private static int num = 1;    private static int flag = 1;    private static Lock lock = new ReentrantLock(true);    private static Condition comditon1 = lock.newCondition();    private static Condition comditon2 = lock.newCondition();    private static Condition comditon3 = lock.newCondition();    private void one() {        while (num <= 100) {            lock.lock();            System.out.println(Thread.currentThread().getName() + "获取到锁");            if (flag == 1) {                for (int i = 0; i < 3; i++) {                    System.out.println(Thread.currentThread().getName() + "====" + num);                    num++;                }                flag = 2;                comditon2.signal();            } else {                try {                    comditon1.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            lock.unlock();        }    }    private void two() {        while (num <= 100) {            lock.lock();            System.out.println(Thread.currentThread().getName() + "获取到锁");            if (flag == 2) {                for (int i = 0; i < 3; i++) {                    System.out.println(Thread.currentThread().getName() + "====" + num);                    num++;                }                flag = 3;                comditon3.signal();            } else {                try {                    comditon2.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            lock.unlock();        }    }    private void three() {        while (num <= 100) {            lock.lock();            System.out.println(Thread.currentThread().getName() + "获取到锁");            if (flag == 3) {                for (int i = 0; i < 3; i++) {                    System.out.println(Thread.currentThread().getName() + "====" + num);                    num++;                }                flag = 1;                comditon1.signal();            } else {                try {                    comditon3.await();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            lock.unlock();        }    }    public static void main(String[] args) {        Test5 test5 = new Test5();        new Thread(test5::two).start();        new Thread(test5::one).start();        new Thread(test5::three).start();    }}