package com.automan.siberia;/** * @Author he.zhou * @Date 2021-04-20 */public class SingleTon {    private static SingleTon singleTon = new SingleTon();    static {        System.out.println("静态代码块执行！");    }    public static int count1;    public static int count2 = 0;    public SingleTon() {        count1++;        count2++;    }    public static SingleTon getInstance() {        return singleTon;    }    /**     * 1.SingleTon.getInstance(); 触发类的初始化     * 2.在类加载的准备阶段会为类的静态变量分配内存和初始化值，此阶段singleTon=null，count1=0，count2=0     * 3.类初始化时，为类的静态变量赋值和执行静态代码快。a: singleton赋值为new SingleTon(),调用类的构造方法,count1=1，count2=1     * b: 继续为count1与count2赋值,count1没有赋值操作，则为1，count2赋值为0     *     * @param args     */    public static void main(String[] args) {        SingleTon singleTon = SingleTon.getInstance();        System.out.println("count1=" + singleTon.count1);        System.out.println("count2=" + singleTon.count2);    }}