package com.automan.siberia.threadPool;import com.google.common.collect.Lists;import java.util.List;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.function.BiFunction;import java.util.function.Supplier;import java.util.stream.Collectors;/** * @Author he.zhou * @Date 2021-04-09 */public class CompletableFutureTest {    public static void main(String[] args) throws ExecutionException, InterruptedException {        test1();    }    public static void test1() {        //文件夹位置        List<String> filePaths = Lists.newArrayList("1", "2", "3");        // 异步处理所有文件        List<CompletableFuture<String>> fileFutures = filePaths.stream()                .map(filePath -> doSomeThing(filePath))                .collect(Collectors.toList());        // 将他们合并起来        CompletableFuture<Void> allFutures = CompletableFuture.allOf(                fileFutures.toArray(new CompletableFuture[fileFutures.size()])        );        allFutures.join();        System.out.println("主线成为那个");    }    private static CompletableFuture<String> doSomeThing(String filePath) {        CompletableFuture<String> task = CompletableFuture.supplyAsync(() -> {            System.out.println(filePath);            try {                Thread.sleep(2000);            } catch (InterruptedException e) {                e.printStackTrace();            }            return filePath;        });        return task;    }    public static void test2() {        List<String> ss=Lists.newArrayList();    }}